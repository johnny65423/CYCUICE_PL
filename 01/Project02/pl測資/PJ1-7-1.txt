當測試「Test data 1 of 3」時，Input為>>1
; was : Proj1-7 test 3
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 1 : Simple, no error"
v
Hello
there!
@$%--3
3.25a
a.b
-.
#t
t
#tt
nil
NIL
()
#f
#fa
exit
"Hi"
"  (1 . 2   . 3)  "
"   ( 1 2 3 . 4 5 6 . 7 . nil ) "
"What's up?"
"There is an ENTER HERE>>\nSee?!"
"Use '\"' to start and close a string."
"OurScheme allows the use of '\\n', '\\t' and  '\\\"' in a string."
"Please enter YES\NO below this line >\n" 
"You need to handle >>\\<<"      
"You also need to handle >>\"<<"
325
-325
3.25
-3.25
+3.25
325.
+325.
-325.
.375
+.3751
-.3751
-3.25
-325.
-.375
-.12499
-.12500
+.31499
+5
+-3.25
exit
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 3 : Basic, no error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Basic, no error, with comment
(1 . (2 . (3 . 4)))
(1 . (2 . (3 . ())))
(1 . (2 3 4))
(1 2 3 . 4)
(1 2 3 . nil)
(1 (2 . 3) . (4))
(-1.5 .("2.25".(^&%$*+-= . nil)))    
(-1.5   
   .   
   ("2.25"   
    .  
    (^&%$*+-=   
 
     .   
     ()  

    )
   ) 
   ; some comment here   
      
  )   more comments here  
(-1.5   
   .   
   ("2.25"   
    .  ; comment all over   " 
    (^&%$*+-=   
 
     .   
     #f  

    )
   ) 
  
      ; some comment there
  )     
(10 
   
   12.())   ; same as : ( 10 12. () )
(10 ().125)   ; same as : ( 10 () .125 )
( 1 2.5
.
())

( 1 2.a . a)
(1                         2.25.5 .(t))
    
         (  
 nil#f  
 
       )  
    
         (  
 nil  
       .
    nil       )  
    
(12.5       .(4 . 5)) ; you should print 3 digits for the decimal part
( 3 . 25 )
( 3. 25 )  ; you can write a number as '3.', which means 3.0
( 3 .25 )  ; you can also write a number as '.3', which means 0.3
( 3.25 )
( abc." defg " )    ; '.' can be used as part of a symbol
(Hi there ! How are you ?)
(Hi there!"How are you?")
(Hi there) (How are you)
(Hi
           .
           (there  .(     ; note that there may be no space between
                          ; '.' and '('
           How is it going?))
           )
(-110 2.125
   -3) (4"The sun is shining on this land."
     23;"hi"

        .5 . 7.)   
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 5 : Medium, no error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Medium, no error, with comment
(1 . (2 . (3 . 4));)
) (1 . (2 . (3 . ())
   ))
(1 . (2 3 . (4
)))
(1 2 3 . 4)
(1 2 3 . nil)
(1 (2 . (3)) . (4))
(t () . (1 2 3 . #f))
((1 2 3)
   (4 . 5) 
   . 
   (6 (7 . nil) 
      (8 . 9)
   )
  ) ((1 2 3)
   (4 . 5) 
   . 
   (6 (7.#f) ((8.5)
   )
  )) (1 2 3) (1)
    
  (1.(2))';(1;2"3")      
    (  
 nil  
       .
    nil       
    )  
( !;)
    .
    ( %^&
      .
      abc
    )
  )
       '(Hi
           .
           (there.(     ; '(', though a token, is also a separater
                        ; ; ; ; ;
                    How is it going?)
           )
          )
'(1 2 3 "To Taiwan. It's fine.").nil (.25
#f
)
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 7 : Complex, no error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complex, no error, with comment
(+.3751 . ("OurScheme allows the use of '\\n', '\\t' and  '\\\"' in a string." . (3 . 4));)
) (1 . (2 . (3 . ())
   ))
(1 . (2 "Use '\"' to start and close a string." . (4
)))
(1 2 3 . +.31499)
(1 2 3 . nil)
(1 (2 . (3)) . (4))
(t () . (1 .375 3 . #f))
((1 2 3)
   (+-3.25 . 5) 
   . 
   (6 (7 . nil) 
      (8 . 9)
   )
  ) ((1 2 3)
   (4 . +25) 
   . 
   (6 (-7.#f) ((8.5)
   )
  )) (1 2 3) (++1)
    
  (1.(-2))';(1;2"3")      
    (  
 nil  
       .
    nil       
    )  
(((1 . -+2) 
    . (("You need to handle >>\\<<"."You also need to handle >>\"<<") 
       . 
       ((exit) . 6)
      )
   ) 
   . (7 . 8)
  )
  (exit 0)
(Hi! (exit) (How about using . (Lisp (instead of . C?))))
(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5)  ; let 'x' (a "local identifier") be 5
         (y "Hi Hello"
        )  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y)exit)) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a))) ; 'bar' a local function too
                                        ; for any input pair 'a' and 'b',
                                        ; return (+ (* a b) a)
                                        
    (+ (foo (+ x 3))   ; this function 'f' calls 'foo',
       z)              ; adds its return-value with 'z' and then
                       ; return the resulting value
   )))
(The sun shines bright(
    in(the old Kentucky's home)T's summer
    (the larkies are gay).nil)-of-the-world)
(The sun shines bright(
    in(the old Kentucky's home)T's summer
    (the larkies are gay). nil)-of-the-world)
';hi
there
';hi
(there'is)
''(''('(cons 'a b)))
''(''('(cons 'a b) (c ())) (d e))
''(''('(cons'a b)(c'()))(d e))
'
   '
    ( '
       '
        ( '
           ( cons'a'b )
          ( c'(exit) )
        )
      ( d e )
    )
;(a((b(c)  
    
<<

正確的輸出應該是>>Welcome to OurScheme!

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 1 : Simple, no error"

> v

> Hello

> there!

> @$%--3

> 3.25a

> a.b

> -.

> #t

> #t

> #tt

> nil

> NIL

> nil

> nil

> #fa

> exit

> "Hi"

> "  (1 . 2   . 3)  "

> "   ( 1 2 3 . 4 5 6 . 7 . nil ) "

> "What's up?"

> "There is an ENTER HERE>>
See?!"

> "Use '"' to start and close a string."

> "OurScheme allows the use of '\n', '\t' and  '\"' in a string."

> "Please enter YES\NO below this line >
"

> "You need to handle >>\<<"

> "You also need to handle >>"<<"

> 325

> -325

> 3.250

> -3.250

> 3.250

> 325.000

> 325.000

> -325.000

> 0.375

> 0.375

> -0.375

> -3.250

> -325.000

> -0.375

> -0.125

> -0.125

> 0.315

> 5

> +-3.25

> exit

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 3 : Basic, no error"

> ( 1
  2
  3
  .
  4
)

> ( 1
  2
  3
)

> ( 1
  2
  3
  4
)

> ( 1
  2
  3
  .
  4
)

> ( 1
  2
  3
)

> ( 1
  ( 2
    .
    3
  )
  4
)

> ( -1.500
  "2.25"
  ^&%$*+-=
)

> ( -1.500
  "2.25"
  ^&%$*+-=
)

> more

> comments

> here

> ( -1.500
  "2.25"
  ^&%$*+-=
)

> ( 10
  12.000
  nil
)

> ( 10
  nil
  0.125
)

> ( 1
  2.500
)

> ( 1
  2.a
  .
  a
)

> ( 1
  2.25.5
  #t
)

> ( nil#f
)

> ( nil
)

> ( 12.500
  4
  .
  5
)

> ( 3
  .
  25
)

> ( 3.000
  25
)

> ( 3
  0.250
)

> ( 3.250
)

> ( abc.
  " defg "
)

> ( Hi
  there
  !
  How
  are
  you
  ?
)

> ( Hi
  there!
  "How are you?"
)

> ( Hi
  there
)

> ( How
  are
  you
)

> ( Hi
  there
  How
  is
  it
  going?
)

> ( -110
  2.125
  -3
)

> ( 4
  "The sun is shining on this land."
  23
  0.500
  .
  7.000
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 5 : Medium, no error"

> ( 1
  2
  3
  .
  4
)

> ( 1
  2
  3
)

> ( 1
  2
  3
  4
)

> ( 1
  2
  3
  .
  4
)

> ( 1
  2
  3
)

> ( 1
  ( 2
    3
  )
  4
)

> ( #t
  nil
  1
  2
  3
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  6
  ( 7
  )
  ( 8
    .
    9
  )
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  6
  ( 7.#f
  )
  ( ( 8.500
    )
  )
)

> ( 1
  2
  3
)

> ( 1
)

> ( 1.000
  ( 2
  )
)

> ( quote
  ( nil
  )
)

> ( !
  %^&
  .
  abc
)

> ( quote
  ( Hi
    there.
    ( How
      is
      it
      going?
    )
  )
)

> ( quote
  ( 1
    2
    3
    "To Taiwan. It's fine."
  )
)

> .nil

> ( 0.250
  nil
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 7 : Complex, no error"

> ( 0.375
  "OurScheme allows the use of '\n', '\t' and  '\"' in a string."
  3
  .
  4
)

> ( 1
  2
  3
)

> ( 1
  2
  "Use '"' to start and close a string."
  4
)

> ( 1
  2
  3
  .
  0.315
)

> ( 1
  2
  3
)

> ( 1
  ( 2
    3
  )
  4
)

> ( #t
  nil
  1
  0.375
  3
)

> ( ( 1
    2
    3
  )
  ( +-3.25
    .
    5
  )
  6
  ( 7
  )
  ( 8
    .
    9
  )
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    25
  )
  6
  ( -7.#f
  )
  ( ( 8.500
    )
  )
)

> ( 1
  2
  3
)

> ( ++1
)

> ( 1.000
  ( -2
  )
)

> ( quote
  ( nil
  )
)

> ( ( ( 1
      .
      -+2
    )
    ( "You need to handle >>\<<"
      .
      "You also need to handle >>"<<"
    )
    ( exit
    )
    .
    6
  )
  7
  .
  8
)

> ( exit
  0
)

> ( Hi!
  ( exit
  )
  ( How
    about
    using
    Lisp
    ( instead
      of
      .
      C?
    )
  )
)

> ( define
  ( f
    z
  )
  ( let
    ( ( x
        5
      )
      ( y
        "Hi Hello"
      )
      ( define
        foo
        ( lambda
          ( y
          )
          ( bar
            x
            y
          )
          exit
        )
      )
      ( define
        bar
        ( lambda
          ( a
            b
          )
          ( +
            ( *
              a
              b
            )
            a
          )
        )
      )
      ( +
        ( foo
          ( +
            x
            3
          )
        )
        z
      )
    )
  )
)

> ( The
  sun
  shines
  bright
  ( in
    ( the
      old
      Kentucky
      ( quote
        s
      )
      home
    )
    T
    ( quote
      s
    )
    summer
    ( the
      larkies
      are
      gay
    )
    .nil
  )
  -of-the-world
)

> ( The
  sun
  shines
  bright
  ( in
    ( the
      old
      Kentucky
      ( quote
        s
      )
      home
    )
    T
    ( quote
      s
    )
    summer
    ( the
      larkies
      are
      gay
    )
  )
  -of-the-world
)

> ( quote
  there
)

> ( quote
  ( there
    ( quote
      is
    )
  )
)

> ( quote
  ( quote
    ( ( quote
        ( quote
          ( ( quote
              ( cons
                ( quote
                  a
                )
                b
              )
            )
          )
        )
      )
    )
  )
)

> ( quote
  ( quote
    ( ( quote
        ( quote
          ( ( quote
              ( cons
                ( quote
                  a
                )
                b
              )
            )
            ( c
              nil
            )
          )
        )
      )
      ( d
        e
      )
    )
  )
)

> ( quote
  ( quote
    ( ( quote
        ( quote
          ( ( quote
              ( cons
                ( quote
                  a
                )
                b
              )
            )
            ( c
              ( quote
                nil
              )
            )
          )
        )
      )
      ( d
        e
      )
    )
  )
)

> ( quote
  ( quote
    ( ( quote
        ( quote
          ( ( quote
              ( cons
                ( quote
                  a
                )
                ( quote
                  b
                )
              )
            )
            ( c
              ( quote
                ( exit
                )
              )
            )
          )
        )
      )
      ( d
        e
      )
    )
  )
)

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!<<