當測試「Test data 1 of 3」時，Input為>>1
; put together from Proj1-8 test 3 and test 1 and test 2
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 2 : Simple, with error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Simple, with error, with comment, with tricks
   
   v   
           ; comment on the first line
           ; comment on the second line  
   Hello   ; comment on the third line   

      there    !    
    

    @$%--3#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!.%%%%^^^&    ; well? 
; How about this?
;a string on the next line ; a string here ;"Flying with an eagle..."
      "   ( 1 2.54 3 . -4. 5 6 Hi there . 7 . nil ) "
; How about this?
;a string on the next line ; a string here ;"Flying with an eagle..."
      "   ( 1 2.54 3 . -4. 5 6 Hi there . 7 . nil () ) 

  This     is       ICE !       ; and some comment here  
#t t nil () #f at#fgh        ; and more comment
325
-   325.
      

    +3.25     .375     3a5b
     


        exit    
    #  f      
    #g .
    ; bla bla bla bla bla     
  #t   
   
( 525
   .
)
    20 . 30

      (        
      )    
      
      #f      

     ()   )
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 4 : Basic, with error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Basic, with error, with comment, with tricks
    !@  .  ( a . b )

    !@  .
( Four score and
    seven years ago.
    "Our fathers brought forth, 
   on this continent, "
; ';' starts a comment until the end of line.
  ; A comment is something that ReadSExp() should skip when 
  ; reading in an S-expression.
  
(1 2 3) )
(1 
   . 
   (- 2
    . 
    (3.875 . 4.)
   )
  )  -7.125
(-1.5.("2.25".(^&%$*+-=.nil)   
        )
  )    
(-1.5 .("2.25".(^&%$*+-=.nil)   
        )
  )    
(-1.5   
   .   
   ("2.25"   
    .  ; comment all over   " 
    (^&%$*+-=  
 
     .#f  

    )
   ) 
  
      ; some comment there
  )     (10
 
   
   12.().625)   ; same as : ( 10 12. () .625 )
(10 ()."125."   ; the ')' and the double-quote "separate" '.'
  )                
( nil.nil )
( ().() )  .  (3)
( 1 2.5 .

) )

( 1 
  "Hi 2";"Hi 3"
  2.a.b . c)
(1                         
   2.25.5)
(1                         
   2.25.5.a.5)
(12.5.(4.5)) ; you should print 3 digits for the decimal part
( 3...25 )  ; you can write a number as '3.', which means 3.0
( abc." defg. ".5 )    ; '.' is not considered a separator
(Hi there ! 
   How#are you ? . (Is it OK?))
(Hi 
   there   !   
  ) (How#are you)
' (().(()))
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 6 : Medium, with error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Medium, with error, with comment, with tricks
(12.5)(12(. 3))
(t.nil.(1 2 3))
'(1 2 3 ")") )
'(1 2 3 ")"())
'(1 2 3 ")".())
 ( t
   ()
   .
   ( ( 1.250 
       0.375
     )
     .
     ("#f))")
   )
 )
(t().((1.25 .375)."#f))"))
((1 2 3)
   (4 . 5) 
   . 
   (6 (7 . nil) (8 . 9)
   .
   10
   )
  )
((1 2 3)
   (4 . 5) 
   (6(7.(#f.#f).5)(".5"."nil").()
   )
   .
   #f
  )
((1 2 3)
   (4 . 5) 
   (6(7.(#f.#f).5).(".5"."nil").()
    
         '     (  
 nil-nil=nil .nil+nil<>nil . nil   
    )  
''( !
      .
      ( %^&
        .
        abc
      )
    )
       '(Hi.there(there.(     
                          )))
       '(Hi.there(there .(()what()
                           )))
'(1 2 3 "To Taiwan". nil)(.25#f)
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 8 : Complex, with error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 8 : Complex, with error, with comment, with tricks
(1 2 3) 4 (5 6 . 7) . 8
(1 2 3) ; this is a comment
. ; error on line 1
(1 2 3) 4 5 (;abc
2 .);error on line 2
(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a))););. a).) ; 'bar' a local function too
                                        ; for any input pair 'a' and 'b',
                                        ; return (+ (* a b) a)
                                        
    (+ (foo (+ x 3))   ; this function 'f' calls 'foo',
       z)              ; adds its return-value with 'z' and then
                       ; return the resulting value
   )) (
        1 . 2 
      )
(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a)))). a b).) ; 'bar' a local function too
                                        ; for any input pair 'a' and 'b',
                                        ; return (+ (* a b) a)
                                        
    (+ (foo (+ x 3))   ; this function 'f' calls 'foo',
       z)              ; adds its return-value with 'z' and then
                       ; return the resulting value
   )) (
        1 . 2 
      )
(((1 . 2) ; 3  4
    3.5
    . ((.875 4.) ; ))
       5
       . 
       ("5 . 6 . 7 ) ".0)
      )
   ) 
   . (7. 8 . nil)
  )

  (((1 . 2) ; 3  4
    3.5
    . ((.875 4.) ; ))
       5
       . 
       ("5 . 6 . 7 ) ".0)
       (7. 8 . ())
      )
   ) 
   . (7. 8 . ())
  )
(save-restriction
    ;; vladimir@cs.ualberta.ca 30-Jul-1997: skip ` in
    ;; `variable' so that the value is returned, not the
    ;; name
    (if (and ignore-quotes
             (eq (following-char) ?)
        )
        (forward-char))
    (narrow-to-region (point-min) opoint)
    (setq expr (read (current-buffer)))
    ;; If it's an (interactive ...) form, it's more
    ;; useful to show how an interactive call would
    ;; use it.
    (and (consp expr)
         (eq (car expr) 'interactive)
         (setq expr
         (list 'call-interactively
         (list 'quote
         (list 'lambda
               '(&rest args)
               expr
               'args)))))
    expr)
(save-restriction
    ;; vladimir@cs.ualberta.ca 30-Jul-1997: skip ` in
    ;; `variable' so that the value is returned, not the
    ;; name
    (if (and ignore-quotes
             (eq (following-char) "?
             )
        )
        (forward-char))
    (narrow-to-region (point-min) opoint)
    (setq expr (read (current-buffer)))
    ;; If it's an (interactive ...) form, it's more
    ;; useful to show how an interactive call would
    ;; use it.
    (and (consp expr)
         (eq (car expr) 'interactive)
         (setq expr
         (list 'call-interactively
         (list 'quote
         (list 'lambda
               '(&rest args)
               expr
               'args)))))
    expr)
(defun eval-last-sexp-1 (eval-last-sexp-arg-internal)
  "Evaluate sexp before point; print value in minibuffer.\n"
  "With argument, print output into current buffer."
  (let ((standard-output (if eval-last-sexp-arg-internal (current-buffer) t)))
    (eval-last-sexp-print-value (eval (preceding-sexp)))))
(defun eval-last-sexp-1 (eval-last-sexp-arg-internal)
  "Evaluate sexp before point; print value in minibuffer.\n
  (let ((standard-output (if eval-last-sexp-arg-internal (current-buffer) t)))
    (eval-last-sexp-print-value (eval (preceding-sexp)))))
(defun eval-last-sexp-print-value (value)
  (let ((unabbreviated (let ((print-length nil) (print-level nil))
       (prin1-to-string value)))
  (print-length eval-expression-print-length)
  (print-level eval-expression-print-level)
  (beg (point))
  end)
    (prog1
  (prin1 value)
      (let ((str (eval-expression-print-format value)))
  (if str (princ str)))
      (setq end (point))
      (when (and (bufferp standard-output)
     (or (not (null print-length))
         (not (null print-level)))
     (not (string= unabbreviated
             (buffer-substring-no-properties beg end))))
  (last-sexp-setup-props beg end value
             unabbreviated
             (buffer-substring-no-properties beg end))
  ))))<<

正確的輸出應該是>>Welcome to OurScheme!

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 2 : Simple, with error"

> v

> Hello

> there

> !

> @$%--3#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!.%%%%^^^&

> "   ( 1 2.54 3 . -4. 5 6 Hi there . 7 . nil ) "

> ERROR (no closing quote) : END-OF-LINE encountered at Line 3 Column 56

> This

> is

> ICE

> !

> #t

> #t

> nil

> nil

> nil

> at#fgh

> 325

> -

> 325.000

> 3.250

> 0.375

> 3a5b

> exit

> #

> f

> #g

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> #t

> ERROR (unexpected token) : atom or '(' expected when token at Line 4 Column 1 is >>)<<

> 20

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> nil

> nil

> nil

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>)<<

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 4 : Basic, with error"

> !@

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 3 is >>.<<

> !@

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 3 is >>.<<

> ERROR (no closing quote) : END-OF-LINE encountered at Line 3 Column 33

> on

> this

> continent,

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 3

> ( 1
  2
  3
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>)<<

> ( 1
  -
  2
  3.875
  .
  4.000
)

> -7.125

> ( -1.5.
  ( "2.25"
    ^&%$*+-=.nil
  )
)

> ( -1.500
  "2.25"
  ^&%$*+-=.nil
)

> ( -1.500
  "2.25"
  ^&%$*+-=
  .#f
)

> ( 10
  12.000
  nil
  0.625
)

> ( 10
  nil
  .
  "125."
)

> ( nil.nil
)

> ( nil
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 3 is >>.<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 3 Column 1 is >>)<<

> ( 1
  "Hi 2"
  2.a.b
  .
  c
)

> ( 1
  2.25.5
)

> ( 1
  2.25.5.a.5
)

> ( 12.5.
  ( 4.500
  )
)

> ( 3...25
)

> ( abc.
  " defg. "
  0.500
)

> ( Hi
  there
  !
  How#are
  you
  ?
  Is
  it
  OK?
)

> ( Hi
  there
  !
)

> ( How#are
  you
)

> ( quote
  ( nil
    nil
  )
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 6 : Medium, with error"

> ( 12.500
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 5 is >>.<<

> ( t.nil.
  ( 1
    2
    3
  )
)

> ( quote
  ( 1
    2
    3
    ")"
  )
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>)<<

> ( quote
  ( 1
    2
    3
    ")"
    nil
  )
)

> ( quote
  ( 1
    2
    3
    ")"
  )
)

> ( #t
  nil
  ( 1.250
    0.375
  )
  "#f))"
)

> ( #t
  nil
  ( 1.250
    0.375
  )
  .
  "#f))"
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  6
  ( 7
  )
  ( 8
    .
    9
  )
  .
  10
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  ( 6
    ( 7.000
      ( #f.#f
      )
      0.500
    )
    ( ".5"
      .
      "nil"
    )
  )
)

> ERROR (unexpected token) : ')' expected when token at Line 3 Column 32 is >>.<<

> ( quote
  ( nil-nil=nil
    .nil+nil<>nil
  )
)

> ( quote
  ( quote
    ( !
      %^&
      .
      abc
    )
  )
)

> ( quote
  ( Hi.there
    ( there.
      nil
    )
  )
)

> ( quote
  ( Hi.there
    ( there
      nil
      what
      nil
    )
  )
)

> ( quote
  ( 1
    2
    3
    "To Taiwan"
  )
)

> ( .25#f
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 8 : Complex, with error"

> ( 1
  2
  3
)

> 4

> ( 5
  6
  .
  7
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ( 1
  2
  3
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>.<<

> ( 1
  2
  3
)

> 4

> 5

> ERROR (unexpected token) : atom or '(' expected when token at Line 2 Column 4 is >>)<<

> ( define
  ( f
    z
  )
  ( let
    ( ( x
        5
      )
    )
    ( define
      foo
      ( lambda
        ( y
        )
        ( bar
          x
          y
        )
      )
    )
    ( define
      bar
      ( lambda
        ( a
          b
        )
        ( +
          ( *
            a
            b
          )
          a
        )
      )
    )
    ( +
      ( foo
        ( +
          x
          3
        )
      )
      z
    )
  )
)

> ( 1
  .
  2
)

> ERROR (unexpected token) : ')' expected when token at Line 9 Column 51 is >>b<<

> ( +
  ( foo
    ( +
      x
      3
    )
  )
  z
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 2 Column 4 is >>)<<

> 1

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 7 is >>)<<

> ( ( ( 1
      .
      2
    )
    3.500
    ( 0.875
      4.000
    )
    5
    "5 . 6 . 7 ) "
    0.000
  )
  7.000
  8
)

> ERROR (unexpected token) : ')' expected when token at Line 8 Column 8 is >>(<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 7 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>.<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 3 is >>)<<

> ( save-restriction
  ( if
    ( and
      ignore-quotes
      ( eq
        ( following-char
        )
        ?
      )
    )
    ( forward-char
    )
  )
  ( narrow-to-region
    ( point-min
    )
    opoint
  )
  ( setq
    expr
    ( read
      ( current-buffer
      )
    )
  )
  ( and
    ( consp
      expr
    )
    ( eq
      ( car
        expr
      )
      ( quote
        interactive
      )
    )
    ( setq
      expr
      ( list
        ( quote
          call-interactively
        )
        ( list
          ( quote
            quote
          )
          ( list
            ( quote
              lambda
            )
            ( quote
              ( &rest
                args
              )
            )
            expr
            ( quote
              args
            )
          )
        )
      )
    )
  )
  expr
)

> ERROR (no closing quote) : END-OF-LINE encountered at Line 6 Column 37

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 14 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 9 is >>)<<

> ( forward-char
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ( narrow-to-region
  ( point-min
  )
  opoint
)

> ( setq
  expr
  ( read
    ( current-buffer
    )
  )
)

> ( and
  ( consp
    expr
  )
  ( eq
    ( car
      expr
    )
    ( quote
      interactive
    )
  )
  ( setq
    expr
    ( list
      ( quote
        call-interactively
      )
      ( list
        ( quote
          quote
        )
        ( list
          ( quote
            lambda
          )
          ( quote
            ( &rest
              args
            )
          )
          expr
          ( quote
            args
          )
        )
      )
    )
  )
)

> expr

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ( defun
  eval-last-sexp-1
  ( eval-last-sexp-arg-internal
  )
  "Evaluate sexp before point; print value in minibuffer.
"
  "With argument, print output into current buffer."
  ( let
    ( ( standard-output
        ( if
          eval-last-sexp-arg-internal
          ( current-buffer
          )
          #t
        )
      )
    )
    ( eval-last-sexp-print-value
      ( eval
        ( preceding-sexp
        )
      )
    )
  )
)

> ERROR (no closing quote) : END-OF-LINE encountered at Line 2 Column 60

> ( let
  ( ( standard-output
      ( if
        eval-last-sexp-arg-internal
        ( current-buffer
        )
        #t
      )
    )
  )
  ( eval-last-sexp-print-value
    ( eval
      ( preceding-sexp
      )
    )
  )
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ( defun
  eval-last-sexp-print-value
  ( value
  )
  ( let
    ( ( unabbreviated
        ( let
          ( ( print-length
              nil
            )
            ( print-level
              nil
            )
          )
          ( prin1-to-string
            value
          )
        )
      )
      ( print-length
        eval-expression-print-length
      )
      ( print-level
        eval-expression-print-level
      )
      ( beg
        ( point
        )
      )
      end
    )
    ( prog1
      ( prin1
        value
      )
      ( let
        ( ( str
            ( eval-expression-print-format
              value
            )
          )
        )
        ( if
          str
          ( princ
            str
          )
        )
      )
      ( setq
        end
        ( point
        )
      )
      ( when
        ( and
          ( bufferp
            standard-output
          )
          ( or
            ( not
              ( null
                print-length
              )
            )
            ( not
              ( null
                print-level
              )
            )
          )
          ( not
            ( string=
              unabbreviated
              ( buffer-substring-no-properties
                beg
                end
              )
            )
          )
        )
        ( last-sexp-setup-props
          beg
          end
          value
          unabbreviated
          ( buffer-substring-no-properties
            beg
            end
          )
        )
      )
    )
  )
)

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!<<