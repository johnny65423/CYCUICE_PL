當測試「Test data 1 of 3」時，Input為>>1
; =============== Problem 8 可見數據 ====================
ab
(define a "=============== Problem 8 viewable case =================")
a

(clean-environment)

a
(cons (clean-environment) a)

; when the being evaluated S-expr is an atom, the result is that atom
; (in our standard print-form)

+3 -.12548 "Hi\n\"

; when a function is being evaluated, the parameters of this function
; are evaluated BEFORE this function is "applied" 
; to the evaluated results (of the parameters)

; 1. A list (or rather, a dotted pair) is CONSTRUCTED.

(cons 3 4)     ; an operation on two objects
(cons 3
        nil
  )            ; '(3 . nil)' = '(3)'
(cons 30
        ()
  )            ; same thing
(cons 30
        #f
  )            ; same thing
()
(cons () nil)(cons #f #f)(cons 'nil '())
(CONS 3 4)      ; Scheme distinquishs between upper and lower cases
(cons hello 4)
hello
(CONS hello there)
(list 1 2 3)(list)(list nil 2 3 #f)
(list 1 2 3)(cons)(list nil 2 3 #f)
(cons 1 2 3 ; Number of arguments should always be checked before
              ; the evaluation of an S-expression ;
  )           ; Once such an error is detected, no evaluation is performed ;
(cons hello there! How are you?)
(cons (clean-environment) ())
(cons (clean-environment))

; 2. quote - a way to "by pass" the default interpretation of an S-exp

(3 4 5)
'(3 4 5)'3 . ()
(quote (3 (4 5)))
(cons 3 
        (4321 5))
(cons 3 '(4321 5))
(list 3 (4 5))
(list 3 '(4 5))
(list 3 
        '(4 5) 
        6 
        '(7 8))
        
; 3. To give a (symbolic) name to an object

; Meaning of DEFINE revisited ("令")

; Basically, DEFINE sets up a (temporary) binding between a symbol 
; and an S-expression

; DEFINE sets up the binding between a name and an internal data structure

abc
(define a 5)   ; "令a為5"; 讓我們把"那個東西"又稱為'a'
(define b (define a 5))  ; 'define' must appear at the toplevel
(define 5 10)            ; first argument of 'define' must be a symbol
(define cons 5          ; first argument of 'define' cannot be the name 
)                       ; of a primitive
(define define 5)
(define)
(define a)
(define a b c)
(cons (define a 5) ())
(cons (define a 5))
(cons (clean-environment) (define a 5))

(define bcd (cons 3 5))
bcd             ; Is 'bcd' a name of some thing?
a             ; Is 'a' a name of some thing?
(define x '((3 4) 5))   ; 讓我們把"那個東西"又稱為'x'
x              ; Is 'x' a name of some thing?

; Combining (1), (2) and (3)

(define hello '(1 2 . 3))
hello
(cons hello 
        4
  )       
(cons hello 
        '(4)
  )       
(define hello "\"CYCU ICE\"" . nil)
(list hello (cons hello hello))
(list hello (cons hello hello) . hello)
(cons hello 
      '(400 (5000 600) 70)
)       
(define there "Number One!")
(cons hello there)
(define hello (cons '(1 2 . (3)) hello)
)
(define 'hello (cons '(1 2 . (3)) hello)
)
( list hello
       4
       'hello
)
  
; Whenever a function is called, its parameters are evaluated BEFORE
; the function is "applied" to the evaluated results of the parameters ;  
; However, this requires that (the evaluated result of) the first 
; component of the being-evaluated list must be bound to a function ;
; if (the evaluated result of) the first component of the being-evaluated list
; is not bound to a function in the first place, the evaluation process 
; stops, and an appropriate error message is issued.

(define a '(3 4))

; 4. Different parts of a list (or a dotted pair) can be 
;    individually accessed

(car '(3 4))    ; the "left part" of a dotted pair
(car '((3 4) 5)  )
(car '((3 4) 5 . 6)  )
(car '((3 4) . 5)  )
(car a)
(car (car a))
(car 345)
(car WarAndPeace!)
(car 'WarAndPeace!)
(car '(WarAndPeace!))
(cdr "(War And Peace!)")
(cdr '((3 4) 5)  )  ; the "right part" of a dotted pair
(cdr '((3 4) "Happy New Year!" . 6)  )
(cdr '((3 4) . "Merry Christmas!")  )
(cdr a)

(exit 0)

; =============== Problem 9 可見數據 ====================
ab
(define a "=============== Problem 9 viewable case =================")
a

(clean-environment)

a

; 5. Primitive predicates (A predicate is a function that returns
;      #t or nil (i.e., #f); By convention, the name of a predicate
;      should have a suffix '?')

(pair? 3)      ; Other Lisps may not have PAIR?; they have ATOM? and LIST?
(pair? '(3 4))
(pair? '(3 . 4))
(pair? "Hello, there!")
(pair? "Hello, " "How are you?")
(pair?)
(null? ())     ; is it the empty list?
(null? #f)     ; #f = nil = ()
(null? '(3 . 4))
(integer? 3)
(integer? 3.4)
(integer? -.4)
(real? +3)
(real? 3.4)
(real? .5)
(number? 3)
(number? 3.4)
(string? "Hi")
(string? +3.4)
(boolean? #t)
(boolean? ())
(boolean? #f)
(boolean? '(3 . 4))
(symbol? 'abc)
(symbol? 3)
(number? America)
(define America '(U. S. A.))
(symbol? America    ; Once the symbol America is evaluated,
  )                   ; do we get a symbol?
(pair? America)
(pair? American)
(boolean? America)
(pair? Europe 4)
(define Europe 'hi)
(pair? America Europe)

; 6. Basic arithmetic, logical and string operations

(+ 3 7 10)
(- 3 7 10)
(- 3.5 5 10)
(* 3 4)
(* 3 "Hi")
(* 3 4.5 5)
(* '(1 (2 3) 4) '(6 7 8))
(*)
(* 3)
(* 3 4 5)
(* 1 2 3 4 5)
(/ 3)
(- 3)
(+ 3)
(- 1 2 3 4 5)
(define a 5)
(/ 15 a)
(/ 7 a)
(/ 15.0 3)
(/ 15 2)
(/ 15.0 2)
(/ 15 0)
(/ 15 2.0)
(/ 45 3 5 2)
(+ 15.125 4)
(+ (* a 10) (pair? (+ a a)))
(not #t)
(not)
(not What about?)
(not 3)
(not '(1 2))
(not ())
(not nil)
(not (pair? (+ a a)))
(> 3 2 1.2)
(> 5 3 1)
(> 5 3 5 nil)
(> 3.125 2)
(>= 3.25 2)
(< 3.125 2)
(<= 3.125 2)
(<= 2 2 2 2 2 2 2 2)
(= 2 2)
(= 2 a)
(> a a)
(> a 'a)
(= 2 a a)
(>= a a a 'a)
(string-append "\"Hello," " there!\"")
(string-append "Hello," " there!" " Wait!")
(string-append "Hello,"")
(string-append "Hello,")
(string-append)
(string>? "az" "aw")
(string>? "az" "aw" "ax")
(string>? "az" "aw" "atuv")
(string>? "az")
(string>?)
(string>? 15 "hi")
(string<? "az" "aw")
(string<? "az" "aw" "ax")
(string<? "az" "aw" (+ 2 (/ 5 3)) "ax")
(string<? "az" "aw" (+ 2 (/ 5 0)) "ax")
(string<? "az" "aw" "atuv")
(string=? "az" "aw")
(string=? "az" "aw" "ax")
(string=? "az" (string-append "a" "z"))
(string=? "az" (string-append "a" "z" 3) (/ (+ 3 5) (- 12 (+ 5 7))))
(string=? "az" (string-append "a" "z" "3") (/ (+ 3 5) (- 12 (+ 5 7))))
(+ 15 (begin "hi" 5))
(+ 15 (begin 4 5 "hi"))
(string>? "hi" "there" a)
(string>? "hi" "there" about)

; 8. eqv? and equal?

; eqv? returns "true" only when the two being compared
; objects are atoms (except in the case of strings)
; or when the two being compared objects "occupy the
; same memory space".

; equal?, on the other hand, is the usual notion of 
; equality comparison

(eqv?)
(eqv? 3)
(eqv? 3 3)
(eqv? 3 3 3)
(define a '((3 (4 5))))
a
(eqv? a a)
(eqv? a '((3 (4 5))))
(equal? a '((3 (4 5))))
(define b a)
(eqv? a b)
(define c '(3 4))
(eqv? a c)
(equal? a c)
(eqv? '((3 (4 5))) '((3 (4 5))))
(eqv? "Hi" "Hi")
(equal? a a)
(equal? '((3 (4 5))) '((3 (4 5))))
(equal? '((3 (4 5))) '(3 4 5))
(equal? "Hi" "Hi")

(define c (cdr a))(eqv? c (cdr b))(define c (cons (car a) (cdr b)))
(eqv? c b)(equal? c b). 5
(+ 10 20)(  . 5 )   (
    
    exit)<<

正確的輸出應該是>>Welcome to OurScheme!

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 8 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (level of CLEAN-ENVIRONMENT)

> 3

> -0.125

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 9

> ( 3
  .
  4
)

> ( 3
)

> ( 30
)

> ( 30
)

> nil

> ( nil
)

> ( nil
)

> ( nil
)

> ERROR (unbound symbol) : CONS

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : CONS

> ( 1
  2
  3
)

> nil

> ( nil
  2
  3
  nil
)

> ( 1
  2
  3
)

> ERROR (incorrect number of arguments) : cons

> ( nil
  2
  3
  nil
)

> ERROR (incorrect number of arguments) : cons

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> ERROR (incorrect number of arguments) : cons

> ERROR (attempt to apply non-function) : 3

> ( 3
  4
  5
)

> 3

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ( 3
  ( 4
    5
  )
)

> ERROR (attempt to apply non-function) : 4321

> ( 3
  4321
  5
)

> ERROR (attempt to apply non-function) : 4

> ( 3
  ( 4
    5
  )
)

> ( 3
  ( 4
    5
  )
  6
  ( 7
    8
  )
)

> ERROR (unbound symbol) : abc

> a defined

> ERROR (level of DEFINE)

> ERROR (DEFINE format) : ( define
  5
  10
)

> ERROR (DEFINE format) : ( define
  cons
  5
)

> ERROR (DEFINE format) : ( define
  define
  5
)

> ERROR (DEFINE format) : ( define
)

> ERROR (DEFINE format) : ( define
  a
)

> ERROR (DEFINE format) : ( define
  a
  b
  c
)

> ERROR (level of DEFINE)

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> bcd defined

> ( 3
  .
  5
)

> 5

> x defined

> ( ( 3
    4
  )
  5
)

> hello defined

> ( 1
  2
  .
  3
)

> ( ( 1
    2
    .
    3
  )
  .
  4
)

> ( ( 1
    2
    .
    3
  )
  4
)

> hello defined

> ( ""CYCU ICE""
  ( ""CYCU ICE""
    .
    ""CYCU ICE""
  )
)

> ERROR (non-list) : ( list
  hello
  ( cons
    hello
    hello
  )
  .
  hello
)

> ( ""CYCU ICE""
  400
  ( 5000
    600
  )
  70
)

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> hello defined

> ERROR (DEFINE format) : ( define
  ( quote
    hello
  )
  ( cons
    ( quote
      ( 1
        2
        3
      )
    )
    hello
  )
)

> ( ( ( 1
      2
      3
    )
    .
    ""CYCU ICE""
  )
  4
  hello
)

> a defined

> 3

> ( 3
  4
)

> ( 3
  4
)

> ( 3
  4
)

> 3

> ERROR (car with incorrect argument type) : 3

> ERROR (car with incorrect argument type) : 345

> ERROR (unbound symbol) : WarAndPeace!

> ERROR (car with incorrect argument type) : WarAndPeace!

> WarAndPeace!

> ERROR (cdr with incorrect argument type) : "(War And Peace!)"

> ( 5
)

> ( "Happy New Year!"
  .
  6
)

> "Merry Christmas!"

> ( 4
)

> ERROR (incorrect number of arguments) : exit

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 9 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> nil

> #t

> #t

> nil

> ERROR (incorrect number of arguments) : pair?

> ERROR (incorrect number of arguments) : pair?

> #t

> #t

> nil

> #t

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> #t

> nil

> #t

> #t

> #t

> nil

> #t

> nil

> ERROR (unbound symbol) : America

> America defined

> nil

> #t

> ERROR (unbound symbol) : American

> nil

> ERROR (incorrect number of arguments) : pair?

> Europe defined

> ERROR (incorrect number of arguments) : pair?

> 20

> -14

> -11.500

> 12

> ERROR (* with incorrect argument type) : "Hi"

> 67.500

> ERROR (* with incorrect argument type) : ( 1
  ( 2
    3
  )
  4
)

> ERROR (incorrect number of arguments) : *

> ERROR (incorrect number of arguments) : *

> 60

> 120

> ERROR (incorrect number of arguments) : /

> ERROR (incorrect number of arguments) : -

> ERROR (incorrect number of arguments) : +

> -13

> a defined

> 3

> 1

> 5.000

> 7

> 7.500

> ERROR (division by zero) : /

> 7.500

> 1

> 19.125

> ERROR (+ with incorrect argument type) : nil

> nil

> ERROR (incorrect number of arguments) : not

> ERROR (incorrect number of arguments) : not

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> ERROR (> with incorrect argument type) : nil

> #t

> #t

> nil

> nil

> #t

> #t

> nil

> nil

> ERROR (> with incorrect argument type) : a

> nil

> ERROR (>= with incorrect argument type) : a

> ""Hello, there!""

> "Hello, there! Wait!"

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 26

> ERROR (incorrect number of arguments) : string-append

> ERROR (incorrect number of arguments) : string-append

> #t

> nil

> #t

> ERROR (incorrect number of arguments) : string>?

> ERROR (incorrect number of arguments) : string>?

> ERROR (string>? with incorrect argument type) : 15

> nil

> nil

> ERROR (string<? with incorrect argument type) : 3

> ERROR (division by zero) : /

> nil

> nil

> nil

> #t

> ERROR (string-append with incorrect argument type) : 3

> ERROR (division by zero) : /

> 20

> ERROR (+ with incorrect argument type) : "hi"

> ERROR (string>? with incorrect argument type) : 5

> ERROR (unbound symbol) : about

> ERROR (incorrect number of arguments) : eqv?

> ERROR (incorrect number of arguments) : eqv?

> #t

> ERROR (incorrect number of arguments) : eqv?

> a defined

> ( ( 3
    ( 4
      5
    )
  )
)

> #t

> nil

> #t

> b defined

> #t

> c defined

> nil

> nil

> nil

> nil

> #t

> #t

> nil

> #t

> c defined

> #t

> c defined

> nil

> #t

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>.<<

> 30

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>.<<

> #<procedure exit>

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!<<