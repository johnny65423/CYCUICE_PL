當測試「Test data 1 of 3」時，Input為>>1
(define a "=============== Problem 6 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - basic - incl.: COND IF BEGIN AND OR

(clean-environment) ; first round ; no error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) (cond ((> x4 x1) (+ x4 x1)) ((< x4 x1)(* x4 x1))(else (- x4 x1))))
(Fcond x1 x2)
(Fcond x2 x3)
(Fcond x1 x1)
(define (Fif x1 x4 x3) (if (>= x2 x3) (+ x1 x3) (- x3 x4)))
(Fif 30 40 50)
(Fif x1 x2 x3)
(Fif x3 x2 x1)
(Fif x2 x2 80)
(define (Fbegin x3) (begin (+ x1 x3) (- x2 x3)))
(Fbegin x1)
(Fbegin 80)
(Fbegin x2)
(define (Fand x4 x2 x5) (and (> x4 x2) (> x2 x5) (> x5 0)))
(Fand x3 x2 x1)
(Fand x3 10 x1)
(Fand 7 6 x2)
(Fand 7 1 -7)
(define (For x1 x4 x3) (or (> x1 x4) (> x4 x3) (> x1 100) (> x4 100) (> x3 100)))
(For 10 20 30)
(For 1000 20 30)
(For 30 40 20)
(For x1 x2 x3)
(For x2 x2 x2)
(For x2 x1 20)
(define x4 (lambda (x1) (* x1 2)))
x4
(x4 x3)
x1
x2

(clean-environment) ; second round ; with error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) (cond ((> x4 x1) (+ x4 x1)) ((= x4 x1)(* x4 x1)))) ; no return-value when x4 < x1
(Fcond x1 x2)
(Fcond x2 x3)
(Fcond x1 x1)
(Fcond x1 (+ x1 x1))
(define (Fif x1 x4 x3) (if (>= x3 x1) (+ x1 x3) )) ; no return-value when x3 < x1
(Fif 30 40 50)
(Fif x1 x2 x3)
(Fif x3 x2 x1)
(Fif x2 x2 80)
(+ x1 x2 (Fif x3 x2 x1))
(define (Fbegin x3) (begin (+ x1 x3) (- x2 x3)))
(Fbegin x1)
(Fbegin 80)
(Fbegin x2)
(Fbegin 352 (+ 2 3))
(define (Fand x4 x2 x5) (and (> x4 x2) (> x2 x5) (> x5 0)))
(Fand x3 x2 x1)
(Fand x3 10 x1)
(Fand 7 6 x2)
(Fand 7 1 -7)
(define (For x1 x4 x3) (or (> x1 x4) (> x4 x3) (> x1 100) (> x4 100) (> x3 100)))
(For 10 20 30)
(For 1000 20 30)
(For 30 40 20)
(For x1 x2 x3)
(For x1 (+ (- x2 1) 5) x3)
(For x2 x2 x2)
(For x2 (cons x2 x2) x2)
(For x2 x1 20)
(define x4 (lambda (x1) (* x1 2)))
x4
(x4 x3)
(+ (x4 x3) x1)
(define x5 x4)
(+ (x4 x3) (x5 x1))
(> (x5 x3) (x4 x1))
(+ 3 (x5 x1 x2))
x1
x2

(clean-environment)

cadr
(define (cadr x) (car (cdr x))
  )
cadr
(car cadr)
(cadr '( (10 20) (30 40) (50 60) 70 . 80 ))
(define cadr-clone cadr)
cadr-clone
(cadr-clone '( (10 20) (30 (40)) (50 60) 70 . 80 ))
(define cadr-clone car)
(cadr-clone '( (10 20) (30 (40)) (50 60) 70 . 80 ))
(define cadr-clone cadr)
(define car cadr)
(cadr '(10 20) 30)
(cadr-clone '(10 20) 30)
( cadr (10 20) )
( cadr 10 )
( cadr '(10) )
(cdar x)
(cadr x)
(define (cdar y) (cdr (car y))
  )
(cdar '((1 2) (3 4) 5 6 7 . 8)
  )
(cdar '(1 2 (3 4) 5 6 7 8)
  )
first
(define first car)
car
first
(first '(10 20 30))
First
(define First 'car)
First
(First (1 2 3))
(first (1 2 3))
(define second cadr)
(second '(10 20 30))
(second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
  )
(first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
         )
  )
(second (first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
                 )
          )
  )
(cdr (first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
              )
       )
  )
(cdr (first (first '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
              )
       )
  )
(exit)<<

正確的輸出應該是>>Welcome to OurScheme!

> a defined

> "=============== Problem 6 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> 12

> 20

> 0

> Fif defined

> 10

> 1

> 8

> 76

> Fbegin defined

> 1

> -76

> 0

> Fand defined

> #t

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> nil

> #t

> x4 defined

> #<procedure lambda>

> 10

> 3

> 4

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> ERROR (no return value) : ( Fcond
  x1
  x2
)

> ERROR (no return value) : ( Fcond
  x2
  x3
)

> 9

> ERROR (no return value) : ( Fcond
  x1
  ( +
    x1
    x1
  )
)

> Fif defined

> 80

> 8

> ERROR (no return value) : ( Fif
  x3
  x2
  x1
)

> 84

> ERROR (unbound parameter) : ( Fif
  x3
  x2
  x1
)

> Fbegin defined

> 1

> -76

> 0

> ERROR (incorrect number of arguments) : Fbegin

> Fand defined

> #t

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> #t

> nil

> ERROR (> with incorrect argument type) : ( 4
  .
  4
)

> #t

> x4 defined

> #<procedure lambda>

> 10

> 13

> x5 defined

> 16

> #t

> ERROR (incorrect number of arguments) : lambda

> 3

> 4

> environment cleaned

> ERROR (unbound symbol) : cadr

> cadr defined

> #<procedure cadr>

> ERROR (car with incorrect argument type) : #<procedure cadr>

> ( 30
  40
)

> cadr-clone defined

> #<procedure cadr>

> ( 30
  ( 40
  )
)

> cadr-clone defined

> ( 10
  20
)

> cadr-clone defined

> ERROR (DEFINE format) : ( define
  car
  cadr
)

> ERROR (incorrect number of arguments) : cadr

> ERROR (incorrect number of arguments) : cadr

> ERROR (attempt to apply non-function) : 10

> ERROR (cdr with incorrect argument type) : 10

> ERROR (car with incorrect argument type) : nil

> ERROR (unbound symbol) : cdar

> ERROR (unbound symbol) : x

> cdar defined

> ( 2
)

> ERROR (cdr with incorrect argument type) : 1

> ERROR (unbound symbol) : first

> first defined

> #<procedure car>

> #<procedure car>

> 10

> ERROR (unbound symbol) : First

> First defined

> car

> ERROR (attempt to apply non-function) : car

> ERROR (attempt to apply non-function) : 1

> second defined

> 20

> ( ( 40
    50
  )
  60
)

> ( 40
  50
)

> 50

> ( 50
)

> ERROR (cdr with incorrect argument type) : 10

> 
Thanks for using OurScheme!<<
